{"ast":null,"code":"import { getValueTransition, frame, GroupPlaybackControls } from 'motion-dom';\nimport { secondsToMilliseconds, MotionGlobalConfig } from 'motion-utils';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { AcceleratedAnimation } from '../animators/AcceleratedAnimation.mjs';\nimport { MainThreadAnimation } from '../animators/MainThreadAnimation.mjs';\nimport { getFinalKeyframe } from '../animators/waapi/utils/get-final-keyframe.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { isTransitionDefined } from '../utils/is-transition-defined.mjs';\nconst animateMotionValue = function (name, value, target) {\n  let transition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  let element = arguments.length > 4 ? arguments[4] : undefined;\n  let isHandoff = arguments.length > 5 ? arguments[5] : undefined;\n  return onComplete => {\n    const valueTransition = getValueTransition(transition, name) || {};\n    /**\r\n     * Most transition values are currently completely overwritten by value-specific\r\n     * transitions. In the future it'd be nicer to blend these transitions. But for now\r\n     * delay actually does inherit from the root transition if not value-specific.\r\n     */\n    const delay = valueTransition.delay || transition.delay || 0;\n    /**\r\n     * Elapsed isn't a public transition option but can be passed through from\r\n     * optimized appear effects in milliseconds.\r\n     */\n    let {\n      elapsed = 0\n    } = transition;\n    elapsed = elapsed - secondsToMilliseconds(delay);\n    let options = {\n      keyframes: Array.isArray(target) ? target : [null, target],\n      ease: \"easeOut\",\n      velocity: value.getVelocity(),\n      ...valueTransition,\n      delay: -elapsed,\n      onUpdate: v => {\n        value.set(v);\n        valueTransition.onUpdate && valueTransition.onUpdate(v);\n      },\n      onComplete: () => {\n        onComplete();\n        valueTransition.onComplete && valueTransition.onComplete();\n      },\n      name,\n      motionValue: value,\n      element: isHandoff ? undefined : element\n    };\n    /**\r\n     * If there's no transition defined for this value, we can generate\r\n     * unique transition settings for this value.\r\n     */\n    if (!isTransitionDefined(valueTransition)) {\n      options = {\n        ...options,\n        ...getDefaultTransition(name, options)\n      };\n    }\n    /**\r\n     * Both WAAPI and our internal animation functions use durations\r\n     * as defined by milliseconds, while our external API defines them\r\n     * as seconds.\r\n     */\n    if (options.duration) {\n      options.duration = secondsToMilliseconds(options.duration);\n    }\n    if (options.repeatDelay) {\n      options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n    }\n    if (options.from !== undefined) {\n      options.keyframes[0] = options.from;\n    }\n    let shouldSkip = false;\n    if (options.type === false || options.duration === 0 && !options.repeatDelay) {\n      options.duration = 0;\n      if (options.delay === 0) {\n        shouldSkip = true;\n      }\n    }\n    if (instantAnimationState.current || MotionGlobalConfig.skipAnimations) {\n      shouldSkip = true;\n      options.duration = 0;\n      options.delay = 0;\n    }\n    /**\r\n     * If the transition type or easing has been explicitly set by the user\r\n     * then we don't want to allow flattening the animation.\r\n     */\n    options.allowFlatten = !valueTransition.type && !valueTransition.ease;\n    /**\r\n     * If we can or must skip creating the animation, and apply only\r\n     * the final keyframe, do so. We also check once keyframes are resolved but\r\n     * this early check prevents the need to create an animation at all.\r\n     */\n    if (shouldSkip && !isHandoff && value.get() !== undefined) {\n      const finalKeyframe = getFinalKeyframe(options.keyframes, valueTransition);\n      if (finalKeyframe !== undefined) {\n        frame.update(() => {\n          options.onUpdate(finalKeyframe);\n          options.onComplete();\n        });\n        // We still want to return some animation controls here rather\n        // than returning undefined\n        return new GroupPlaybackControls([]);\n      }\n    }\n    /**\r\n     * Animate via WAAPI if possible. If this is a handoff animation, the optimised animation will be running via\r\n     * WAAPI. Therefore, this animation must be JS to ensure it runs \"under\" the\r\n     * optimised animation.\r\n     */\n    if (!isHandoff && AcceleratedAnimation.supports(options)) {\n      return new AcceleratedAnimation(options);\n    } else {\n      return new MainThreadAnimation(options);\n    }\n  };\n};\nexport { animateMotionValue };","map":{"version":3,"names":["getValueTransition","frame","GroupPlaybackControls","secondsToMilliseconds","MotionGlobalConfig","instantAnimationState","AcceleratedAnimation","MainThreadAnimation","getFinalKeyframe","getDefaultTransition","isTransitionDefined","animateMotionValue","name","value","target","transition","arguments","length","undefined","element","isHandoff","onComplete","valueTransition","delay","elapsed","options","keyframes","Array","isArray","ease","velocity","getVelocity","onUpdate","v","set","motionValue","duration","repeatDelay","from","shouldSkip","type","current","skipAnimations","allowFlatten","get","finalKeyframe","update","supports"],"sources":["D:/portfolio-master/node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs"],"sourcesContent":["import { getValueTransition, frame, GroupPlaybackControls } from 'motion-dom';\r\nimport { secondsToMilliseconds, MotionGlobalConfig } from 'motion-utils';\r\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\r\nimport { AcceleratedAnimation } from '../animators/AcceleratedAnimation.mjs';\r\nimport { MainThreadAnimation } from '../animators/MainThreadAnimation.mjs';\r\nimport { getFinalKeyframe } from '../animators/waapi/utils/get-final-keyframe.mjs';\r\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\r\nimport { isTransitionDefined } from '../utils/is-transition-defined.mjs';\r\n\r\nconst animateMotionValue = (name, value, target, transition = {}, element, isHandoff) => (onComplete) => {\r\n    const valueTransition = getValueTransition(transition, name) || {};\r\n    /**\r\n     * Most transition values are currently completely overwritten by value-specific\r\n     * transitions. In the future it'd be nicer to blend these transitions. But for now\r\n     * delay actually does inherit from the root transition if not value-specific.\r\n     */\r\n    const delay = valueTransition.delay || transition.delay || 0;\r\n    /**\r\n     * Elapsed isn't a public transition option but can be passed through from\r\n     * optimized appear effects in milliseconds.\r\n     */\r\n    let { elapsed = 0 } = transition;\r\n    elapsed = elapsed - secondsToMilliseconds(delay);\r\n    let options = {\r\n        keyframes: Array.isArray(target) ? target : [null, target],\r\n        ease: \"easeOut\",\r\n        velocity: value.getVelocity(),\r\n        ...valueTransition,\r\n        delay: -elapsed,\r\n        onUpdate: (v) => {\r\n            value.set(v);\r\n            valueTransition.onUpdate && valueTransition.onUpdate(v);\r\n        },\r\n        onComplete: () => {\r\n            onComplete();\r\n            valueTransition.onComplete && valueTransition.onComplete();\r\n        },\r\n        name,\r\n        motionValue: value,\r\n        element: isHandoff ? undefined : element,\r\n    };\r\n    /**\r\n     * If there's no transition defined for this value, we can generate\r\n     * unique transition settings for this value.\r\n     */\r\n    if (!isTransitionDefined(valueTransition)) {\r\n        options = {\r\n            ...options,\r\n            ...getDefaultTransition(name, options),\r\n        };\r\n    }\r\n    /**\r\n     * Both WAAPI and our internal animation functions use durations\r\n     * as defined by milliseconds, while our external API defines them\r\n     * as seconds.\r\n     */\r\n    if (options.duration) {\r\n        options.duration = secondsToMilliseconds(options.duration);\r\n    }\r\n    if (options.repeatDelay) {\r\n        options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\r\n    }\r\n    if (options.from !== undefined) {\r\n        options.keyframes[0] = options.from;\r\n    }\r\n    let shouldSkip = false;\r\n    if (options.type === false ||\r\n        (options.duration === 0 && !options.repeatDelay)) {\r\n        options.duration = 0;\r\n        if (options.delay === 0) {\r\n            shouldSkip = true;\r\n        }\r\n    }\r\n    if (instantAnimationState.current ||\r\n        MotionGlobalConfig.skipAnimations) {\r\n        shouldSkip = true;\r\n        options.duration = 0;\r\n        options.delay = 0;\r\n    }\r\n    /**\r\n     * If the transition type or easing has been explicitly set by the user\r\n     * then we don't want to allow flattening the animation.\r\n     */\r\n    options.allowFlatten = !valueTransition.type && !valueTransition.ease;\r\n    /**\r\n     * If we can or must skip creating the animation, and apply only\r\n     * the final keyframe, do so. We also check once keyframes are resolved but\r\n     * this early check prevents the need to create an animation at all.\r\n     */\r\n    if (shouldSkip && !isHandoff && value.get() !== undefined) {\r\n        const finalKeyframe = getFinalKeyframe(options.keyframes, valueTransition);\r\n        if (finalKeyframe !== undefined) {\r\n            frame.update(() => {\r\n                options.onUpdate(finalKeyframe);\r\n                options.onComplete();\r\n            });\r\n            // We still want to return some animation controls here rather\r\n            // than returning undefined\r\n            return new GroupPlaybackControls([]);\r\n        }\r\n    }\r\n    /**\r\n     * Animate via WAAPI if possible. If this is a handoff animation, the optimised animation will be running via\r\n     * WAAPI. Therefore, this animation must be JS to ensure it runs \"under\" the\r\n     * optimised animation.\r\n     */\r\n    if (!isHandoff && AcceleratedAnimation.supports(options)) {\r\n        return new AcceleratedAnimation(options);\r\n    }\r\n    else {\r\n        return new MainThreadAnimation(options);\r\n    }\r\n};\r\n\r\nexport { animateMotionValue };\r\n"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,KAAK,EAAEC,qBAAqB,QAAQ,YAAY;AAC7E,SAASC,qBAAqB,EAAEC,kBAAkB,QAAQ,cAAc;AACxE,SAASC,qBAAqB,QAAQ,8CAA8C;AACpF,SAASC,oBAAoB,QAAQ,uCAAuC;AAC5E,SAASC,mBAAmB,QAAQ,sCAAsC;AAC1E,SAASC,gBAAgB,QAAQ,iDAAiD;AAClF,SAASC,oBAAoB,QAAQ,kCAAkC;AACvE,SAASC,mBAAmB,QAAQ,oCAAoC;AAExE,MAAMC,kBAAkB,GAAG,SAAAA,CAACC,IAAI,EAAEC,KAAK,EAAEC,MAAM;EAAA,IAAEC,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAAA,IAAEG,OAAO,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IAAEE,SAAS,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,OAAMG,UAAU,IAAK;IACrG,MAAMC,eAAe,GAAGtB,kBAAkB,CAACe,UAAU,EAAEH,IAAI,CAAC,IAAI,CAAC,CAAC;IAClE;AACJ;AACA;AACA;AACA;IACI,MAAMW,KAAK,GAAGD,eAAe,CAACC,KAAK,IAAIR,UAAU,CAACQ,KAAK,IAAI,CAAC;IAC5D;AACJ;AACA;AACA;IACI,IAAI;MAAEC,OAAO,GAAG;IAAE,CAAC,GAAGT,UAAU;IAChCS,OAAO,GAAGA,OAAO,GAAGrB,qBAAqB,CAACoB,KAAK,CAAC;IAChD,IAAIE,OAAO,GAAG;MACVC,SAAS,EAAEC,KAAK,CAACC,OAAO,CAACd,MAAM,CAAC,GAAGA,MAAM,GAAG,CAAC,IAAI,EAAEA,MAAM,CAAC;MAC1De,IAAI,EAAE,SAAS;MACfC,QAAQ,EAAEjB,KAAK,CAACkB,WAAW,CAAC,CAAC;MAC7B,GAAGT,eAAe;MAClBC,KAAK,EAAE,CAACC,OAAO;MACfQ,QAAQ,EAAGC,CAAC,IAAK;QACbpB,KAAK,CAACqB,GAAG,CAACD,CAAC,CAAC;QACZX,eAAe,CAACU,QAAQ,IAAIV,eAAe,CAACU,QAAQ,CAACC,CAAC,CAAC;MAC3D,CAAC;MACDZ,UAAU,EAAEA,CAAA,KAAM;QACdA,UAAU,CAAC,CAAC;QACZC,eAAe,CAACD,UAAU,IAAIC,eAAe,CAACD,UAAU,CAAC,CAAC;MAC9D,CAAC;MACDT,IAAI;MACJuB,WAAW,EAAEtB,KAAK;MAClBM,OAAO,EAAEC,SAAS,GAAGF,SAAS,GAAGC;IACrC,CAAC;IACD;AACJ;AACA;AACA;IACI,IAAI,CAACT,mBAAmB,CAACY,eAAe,CAAC,EAAE;MACvCG,OAAO,GAAG;QACN,GAAGA,OAAO;QACV,GAAGhB,oBAAoB,CAACG,IAAI,EAAEa,OAAO;MACzC,CAAC;IACL;IACA;AACJ;AACA;AACA;AACA;IACI,IAAIA,OAAO,CAACW,QAAQ,EAAE;MAClBX,OAAO,CAACW,QAAQ,GAAGjC,qBAAqB,CAACsB,OAAO,CAACW,QAAQ,CAAC;IAC9D;IACA,IAAIX,OAAO,CAACY,WAAW,EAAE;MACrBZ,OAAO,CAACY,WAAW,GAAGlC,qBAAqB,CAACsB,OAAO,CAACY,WAAW,CAAC;IACpE;IACA,IAAIZ,OAAO,CAACa,IAAI,KAAKpB,SAAS,EAAE;MAC5BO,OAAO,CAACC,SAAS,CAAC,CAAC,CAAC,GAAGD,OAAO,CAACa,IAAI;IACvC;IACA,IAAIC,UAAU,GAAG,KAAK;IACtB,IAAId,OAAO,CAACe,IAAI,KAAK,KAAK,IACrBf,OAAO,CAACW,QAAQ,KAAK,CAAC,IAAI,CAACX,OAAO,CAACY,WAAY,EAAE;MAClDZ,OAAO,CAACW,QAAQ,GAAG,CAAC;MACpB,IAAIX,OAAO,CAACF,KAAK,KAAK,CAAC,EAAE;QACrBgB,UAAU,GAAG,IAAI;MACrB;IACJ;IACA,IAAIlC,qBAAqB,CAACoC,OAAO,IAC7BrC,kBAAkB,CAACsC,cAAc,EAAE;MACnCH,UAAU,GAAG,IAAI;MACjBd,OAAO,CAACW,QAAQ,GAAG,CAAC;MACpBX,OAAO,CAACF,KAAK,GAAG,CAAC;IACrB;IACA;AACJ;AACA;AACA;IACIE,OAAO,CAACkB,YAAY,GAAG,CAACrB,eAAe,CAACkB,IAAI,IAAI,CAAClB,eAAe,CAACO,IAAI;IACrE;AACJ;AACA;AACA;AACA;IACI,IAAIU,UAAU,IAAI,CAACnB,SAAS,IAAIP,KAAK,CAAC+B,GAAG,CAAC,CAAC,KAAK1B,SAAS,EAAE;MACvD,MAAM2B,aAAa,GAAGrC,gBAAgB,CAACiB,OAAO,CAACC,SAAS,EAAEJ,eAAe,CAAC;MAC1E,IAAIuB,aAAa,KAAK3B,SAAS,EAAE;QAC7BjB,KAAK,CAAC6C,MAAM,CAAC,MAAM;UACfrB,OAAO,CAACO,QAAQ,CAACa,aAAa,CAAC;UAC/BpB,OAAO,CAACJ,UAAU,CAAC,CAAC;QACxB,CAAC,CAAC;QACF;QACA;QACA,OAAO,IAAInB,qBAAqB,CAAC,EAAE,CAAC;MACxC;IACJ;IACA;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACkB,SAAS,IAAId,oBAAoB,CAACyC,QAAQ,CAACtB,OAAO,CAAC,EAAE;MACtD,OAAO,IAAInB,oBAAoB,CAACmB,OAAO,CAAC;IAC5C,CAAC,MACI;MACD,OAAO,IAAIlB,mBAAmB,CAACkB,OAAO,CAAC;IAC3C;EACJ,CAAC;AAAA;AAED,SAASd,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}