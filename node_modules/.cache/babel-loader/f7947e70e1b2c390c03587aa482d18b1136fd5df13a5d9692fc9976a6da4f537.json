{"ast":null,"code":"import { secondsToMilliseconds } from 'motion-utils';\nimport { BaseGroupPlaybackControls } from '../animation/controls/BaseGroup.mjs';\nimport { getValueTransition } from '../animation/utils/get-value-transition.mjs';\nimport { NativeAnimationControls } from '../animation/waapi/NativeAnimationControls.mjs';\nimport { PseudoAnimation } from '../animation/waapi/PseudoAnimation.mjs';\nimport { applyGeneratorOptions } from '../animation/waapi/utils/convert-options.mjs';\nimport { mapEasingToNativeEasing } from '../animation/waapi/utils/easing.mjs';\nimport { chooseLayerType } from './utils/choose-layer-type.mjs';\nimport { css } from './utils/css.mjs';\nimport { getLayerName } from './utils/get-layer-name.mjs';\nimport { getViewAnimations } from './utils/get-view-animations.mjs';\nimport { hasTarget } from './utils/has-target.mjs';\nconst definitionNames = [\"layout\", \"enter\", \"exit\", \"new\", \"old\"];\nfunction startViewAnimation(update, defaultOptions, targets) {\n  if (!document.startViewTransition) {\n    return new Promise(async resolve => {\n      await update();\n      resolve(new BaseGroupPlaybackControls([]));\n    });\n  }\n  // TODO: Go over existing targets and ensure they all have ids\n  /**\r\n   * If we don't have any animations defined for the root target,\r\n   * remove it from being captured.\r\n   */\n  if (!hasTarget(\"root\", targets)) {\n    css.set(\":root\", {\n      \"view-transition-name\": \"none\"\n    });\n  }\n  /**\r\n   * Set the timing curve to linear for all view transition layers.\r\n   * This gets baked into the keyframes, which can't be changed\r\n   * without breaking the generated animation.\r\n   *\r\n   * This allows us to set easing via updateTiming - which can be changed.\r\n   */\n  css.set(\"::view-transition-group(*), ::view-transition-old(*), ::view-transition-new(*)\", {\n    \"animation-timing-function\": \"linear !important\"\n  });\n  css.commit(); // Write\n  const transition = document.startViewTransition(async () => {\n    await update();\n    // TODO: Go over new targets and ensure they all have ids\n  });\n  transition.finished.finally(() => {\n    css.remove(); // Write\n  });\n  return new Promise(resolve => {\n    transition.ready.then(() => {\n      var _a;\n      const generatedViewAnimations = getViewAnimations();\n      const animations = [];\n      /**\r\n       * Create animations for our definitions\r\n       */\n      targets.forEach((definition, target) => {\n        // TODO: If target is not \"root\", resolve elements\n        // and iterate over each\n        for (const key of definitionNames) {\n          if (!definition[key]) continue;\n          const {\n            keyframes,\n            options\n          } = definition[key];\n          for (let [valueName, valueKeyframes] of Object.entries(keyframes)) {\n            if (!valueKeyframes) continue;\n            const valueOptions = {\n              ...getValueTransition(defaultOptions, valueName),\n              ...getValueTransition(options, valueName)\n            };\n            const type = chooseLayerType(key);\n            /**\r\n             * If this is an opacity animation, and keyframes are not an array,\r\n             * we need to convert them into an array and set an initial value.\r\n             */\n            if (valueName === \"opacity\" && !Array.isArray(valueKeyframes)) {\n              const initialValue = type === \"new\" ? 0 : 1;\n              valueKeyframes = [initialValue, valueKeyframes];\n            }\n            /**\r\n             * Resolve stagger function if provided.\r\n             */\n            if (typeof valueOptions.delay === \"function\") {\n              valueOptions.delay = valueOptions.delay(0, 1);\n            }\n            const animation = new PseudoAnimation(document.documentElement, `::view-transition-${type}(${target})`, valueName, valueKeyframes, valueOptions);\n            animations.push(animation);\n          }\n        }\n      });\n      /**\r\n       * Handle browser generated animations\r\n       */\n      for (const animation of generatedViewAnimations) {\n        if (animation.playState === \"finished\") continue;\n        const {\n          effect\n        } = animation;\n        if (!effect || !(effect instanceof KeyframeEffect)) continue;\n        const {\n          pseudoElement\n        } = effect;\n        if (!pseudoElement) continue;\n        const name = getLayerName(pseudoElement);\n        if (!name) continue;\n        const targetDefinition = targets.get(name.layer);\n        if (!targetDefinition) {\n          /**\r\n           * If transition name is group then update the timing of the animation\r\n           * whereas if it's old or new then we could possibly replace it using\r\n           * the above method.\r\n           */\n          const transitionName = name.type === \"group\" ? \"layout\" : \"\";\n          const animationTransition = {\n            ...getValueTransition(defaultOptions, transitionName)\n          };\n          applyGeneratorOptions(animationTransition);\n          const easing = mapEasingToNativeEasing(animationTransition.ease, animationTransition.duration);\n          effect.updateTiming({\n            delay: secondsToMilliseconds((_a = animationTransition.delay) !== null && _a !== void 0 ? _a : 0),\n            duration: animationTransition.duration,\n            easing\n          });\n          animations.push(new NativeAnimationControls(animation));\n        } else if (hasOpacity(targetDefinition, \"enter\") && hasOpacity(targetDefinition, \"exit\") && effect.getKeyframes().some(keyframe => keyframe.mixBlendMode)) {\n          animations.push(new NativeAnimationControls(animation));\n        } else {\n          animation.cancel();\n        }\n      }\n      resolve(new BaseGroupPlaybackControls(animations));\n    });\n  });\n}\nfunction hasOpacity(target, key) {\n  var _a;\n  return (_a = target === null || target === void 0 ? void 0 : target[key]) === null || _a === void 0 ? void 0 : _a.keyframes.opacity;\n}\nexport { startViewAnimation };","map":{"version":3,"names":["secondsToMilliseconds","BaseGroupPlaybackControls","getValueTransition","NativeAnimationControls","PseudoAnimation","applyGeneratorOptions","mapEasingToNativeEasing","chooseLayerType","css","getLayerName","getViewAnimations","hasTarget","definitionNames","startViewAnimation","update","defaultOptions","targets","document","startViewTransition","Promise","resolve","set","commit","transition","finished","finally","remove","ready","then","_a","generatedViewAnimations","animations","forEach","definition","target","key","keyframes","options","valueName","valueKeyframes","Object","entries","valueOptions","type","Array","isArray","initialValue","delay","animation","documentElement","push","playState","effect","KeyframeEffect","pseudoElement","name","targetDefinition","get","layer","transitionName","animationTransition","easing","ease","duration","updateTiming","hasOpacity","getKeyframes","some","keyframe","mixBlendMode","cancel","opacity"],"sources":["D:/portfolio-master/node_modules/motion-dom/dist/es/view/start.mjs"],"sourcesContent":["import { secondsToMilliseconds } from 'motion-utils';\r\nimport { BaseGroupPlaybackControls } from '../animation/controls/BaseGroup.mjs';\r\nimport { getValueTransition } from '../animation/utils/get-value-transition.mjs';\r\nimport { NativeAnimationControls } from '../animation/waapi/NativeAnimationControls.mjs';\r\nimport { PseudoAnimation } from '../animation/waapi/PseudoAnimation.mjs';\r\nimport { applyGeneratorOptions } from '../animation/waapi/utils/convert-options.mjs';\r\nimport { mapEasingToNativeEasing } from '../animation/waapi/utils/easing.mjs';\r\nimport { chooseLayerType } from './utils/choose-layer-type.mjs';\r\nimport { css } from './utils/css.mjs';\r\nimport { getLayerName } from './utils/get-layer-name.mjs';\r\nimport { getViewAnimations } from './utils/get-view-animations.mjs';\r\nimport { hasTarget } from './utils/has-target.mjs';\r\n\r\nconst definitionNames = [\"layout\", \"enter\", \"exit\", \"new\", \"old\"];\r\nfunction startViewAnimation(update, defaultOptions, targets) {\r\n    if (!document.startViewTransition) {\r\n        return new Promise(async (resolve) => {\r\n            await update();\r\n            resolve(new BaseGroupPlaybackControls([]));\r\n        });\r\n    }\r\n    // TODO: Go over existing targets and ensure they all have ids\r\n    /**\r\n     * If we don't have any animations defined for the root target,\r\n     * remove it from being captured.\r\n     */\r\n    if (!hasTarget(\"root\", targets)) {\r\n        css.set(\":root\", {\r\n            \"view-transition-name\": \"none\",\r\n        });\r\n    }\r\n    /**\r\n     * Set the timing curve to linear for all view transition layers.\r\n     * This gets baked into the keyframes, which can't be changed\r\n     * without breaking the generated animation.\r\n     *\r\n     * This allows us to set easing via updateTiming - which can be changed.\r\n     */\r\n    css.set(\"::view-transition-group(*), ::view-transition-old(*), ::view-transition-new(*)\", { \"animation-timing-function\": \"linear !important\" });\r\n    css.commit(); // Write\r\n    const transition = document.startViewTransition(async () => {\r\n        await update();\r\n        // TODO: Go over new targets and ensure they all have ids\r\n    });\r\n    transition.finished.finally(() => {\r\n        css.remove(); // Write\r\n    });\r\n    return new Promise((resolve) => {\r\n        transition.ready.then(() => {\r\n            var _a;\r\n            const generatedViewAnimations = getViewAnimations();\r\n            const animations = [];\r\n            /**\r\n             * Create animations for our definitions\r\n             */\r\n            targets.forEach((definition, target) => {\r\n                // TODO: If target is not \"root\", resolve elements\r\n                // and iterate over each\r\n                for (const key of definitionNames) {\r\n                    if (!definition[key])\r\n                        continue;\r\n                    const { keyframes, options } = definition[key];\r\n                    for (let [valueName, valueKeyframes] of Object.entries(keyframes)) {\r\n                        if (!valueKeyframes)\r\n                            continue;\r\n                        const valueOptions = {\r\n                            ...getValueTransition(defaultOptions, valueName),\r\n                            ...getValueTransition(options, valueName),\r\n                        };\r\n                        const type = chooseLayerType(key);\r\n                        /**\r\n                         * If this is an opacity animation, and keyframes are not an array,\r\n                         * we need to convert them into an array and set an initial value.\r\n                         */\r\n                        if (valueName === \"opacity\" &&\r\n                            !Array.isArray(valueKeyframes)) {\r\n                            const initialValue = type === \"new\" ? 0 : 1;\r\n                            valueKeyframes = [initialValue, valueKeyframes];\r\n                        }\r\n                        /**\r\n                         * Resolve stagger function if provided.\r\n                         */\r\n                        if (typeof valueOptions.delay === \"function\") {\r\n                            valueOptions.delay = valueOptions.delay(0, 1);\r\n                        }\r\n                        const animation = new PseudoAnimation(document.documentElement, `::view-transition-${type}(${target})`, valueName, valueKeyframes, valueOptions);\r\n                        animations.push(animation);\r\n                    }\r\n                }\r\n            });\r\n            /**\r\n             * Handle browser generated animations\r\n             */\r\n            for (const animation of generatedViewAnimations) {\r\n                if (animation.playState === \"finished\")\r\n                    continue;\r\n                const { effect } = animation;\r\n                if (!effect || !(effect instanceof KeyframeEffect))\r\n                    continue;\r\n                const { pseudoElement } = effect;\r\n                if (!pseudoElement)\r\n                    continue;\r\n                const name = getLayerName(pseudoElement);\r\n                if (!name)\r\n                    continue;\r\n                const targetDefinition = targets.get(name.layer);\r\n                if (!targetDefinition) {\r\n                    /**\r\n                     * If transition name is group then update the timing of the animation\r\n                     * whereas if it's old or new then we could possibly replace it using\r\n                     * the above method.\r\n                     */\r\n                    const transitionName = name.type === \"group\" ? \"layout\" : \"\";\r\n                    const animationTransition = {\r\n                        ...getValueTransition(defaultOptions, transitionName),\r\n                    };\r\n                    applyGeneratorOptions(animationTransition);\r\n                    const easing = mapEasingToNativeEasing(animationTransition.ease, animationTransition.duration);\r\n                    effect.updateTiming({\r\n                        delay: secondsToMilliseconds((_a = animationTransition.delay) !== null && _a !== void 0 ? _a : 0),\r\n                        duration: animationTransition.duration,\r\n                        easing,\r\n                    });\r\n                    animations.push(new NativeAnimationControls(animation));\r\n                }\r\n                else if (hasOpacity(targetDefinition, \"enter\") &&\r\n                    hasOpacity(targetDefinition, \"exit\") &&\r\n                    effect\r\n                        .getKeyframes()\r\n                        .some((keyframe) => keyframe.mixBlendMode)) {\r\n                    animations.push(new NativeAnimationControls(animation));\r\n                }\r\n                else {\r\n                    animation.cancel();\r\n                }\r\n            }\r\n            resolve(new BaseGroupPlaybackControls(animations));\r\n        });\r\n    });\r\n}\r\nfunction hasOpacity(target, key) {\r\n    var _a;\r\n    return (_a = target === null || target === void 0 ? void 0 : target[key]) === null || _a === void 0 ? void 0 : _a.keyframes.opacity;\r\n}\r\n\r\nexport { startViewAnimation };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}