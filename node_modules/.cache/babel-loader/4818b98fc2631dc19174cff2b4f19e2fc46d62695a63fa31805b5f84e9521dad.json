{"ast":null,"code":"import { supportsLinearEasing, attachTimeline, isGenerator, isWaapiSupportedEasing } from 'motion-dom';\nimport { millisecondsToSeconds, secondsToMilliseconds, noop } from 'motion-utils';\nimport { anticipate } from '../../easing/anticipate.mjs';\nimport { backInOut } from '../../easing/back.mjs';\nimport { circInOut } from '../../easing/circ.mjs';\nimport { DOMKeyframesResolver } from '../../render/dom/DOMKeyframesResolver.mjs';\nimport { BaseAnimation } from './BaseAnimation.mjs';\nimport { MainThreadAnimation } from './MainThreadAnimation.mjs';\nimport { acceleratedValues } from './utils/accelerated-values.mjs';\nimport { startWaapiAnimation } from './waapi/index.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\nimport { supportsWaapi } from './waapi/utils/supports-waapi.mjs';\n\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\n/**\n * Check if an animation can run natively via WAAPI or requires pregenerated keyframes.\n * WAAPI doesn't support spring or function easings so we run these as JS animation before\n * handing off.\n */\nfunction requiresPregeneratedKeyframes(options) {\n  return isGenerator(options.type) || options.type === \"spring\" || !isWaapiSupportedEasing(options.ease);\n}\nfunction pregenerateKeyframes(keyframes, options) {\n  /**\n   * Create a main-thread animation to pregenerate keyframes.\n   * We sample this at regular intervals to generate keyframes that we then\n   * linearly interpolate between.\n   */\n  const sampleAnimation = new MainThreadAnimation({\n    ...options,\n    keyframes,\n    repeat: 0,\n    delay: 0,\n    isGenerator: true\n  });\n  let state = {\n    done: false,\n    value: keyframes[0]\n  };\n  const pregeneratedKeyframes = [];\n  /**\n   * Bail after 20 seconds of pre-generated keyframes as it's likely\n   * we're heading for an infinite loop.\n   */\n  let t = 0;\n  while (!state.done && t < maxDuration) {\n    state = sampleAnimation.sample(t);\n    pregeneratedKeyframes.push(state.value);\n    t += sampleDelta;\n  }\n  return {\n    times: undefined,\n    keyframes: pregeneratedKeyframes,\n    duration: t - sampleDelta,\n    ease: \"linear\"\n  };\n}\nconst unsupportedEasingFunctions = {\n  anticipate,\n  backInOut,\n  circInOut\n};\nfunction isUnsupportedEase(key) {\n  return key in unsupportedEasingFunctions;\n}\nclass AcceleratedAnimation extends BaseAnimation {\n  constructor(options) {\n    super(options);\n    const {\n      name,\n      motionValue,\n      element,\n      keyframes\n    } = this.options;\n    this.resolver = new DOMKeyframesResolver(keyframes, (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe), name, motionValue, element);\n    this.resolver.scheduleResolve();\n  }\n  initPlayback(keyframes, finalKeyframe) {\n    let {\n      duration = 300,\n      times,\n      ease,\n      type,\n      motionValue,\n      name,\n      startTime\n    } = this.options;\n    /**\n     * If element has since been unmounted, return false to indicate\n     * the animation failed to initialised.\n     */\n    if (!motionValue.owner || !motionValue.owner.current) {\n      return false;\n    }\n    /**\n     * If the user has provided an easing function name that isn't supported\n     * by WAAPI (like \"anticipate\"), we need to provide the corressponding\n     * function. This will later get converted to a linear() easing function.\n     */\n    if (typeof ease === \"string\" && supportsLinearEasing() && isUnsupportedEase(ease)) {\n      ease = unsupportedEasingFunctions[ease];\n    }\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (requiresPregeneratedKeyframes(this.options)) {\n      const {\n        onComplete,\n        onUpdate,\n        motionValue,\n        element,\n        ...options\n      } = this.options;\n      const pregeneratedAnimation = pregenerateKeyframes(keyframes, options);\n      keyframes = pregeneratedAnimation.keyframes;\n      // If this is a very short animation, ensure we have\n      // at least two keyframes to animate between as older browsers\n      // can't animate between a single keyframe.\n      if (keyframes.length === 1) {\n        keyframes[1] = keyframes[0];\n      }\n      duration = pregeneratedAnimation.duration;\n      times = pregeneratedAnimation.times;\n      ease = pregeneratedAnimation.ease;\n      type = \"keyframes\";\n    }\n    const animation = startWaapiAnimation(motionValue.owner.current, name, keyframes, {\n      ...this.options,\n      duration,\n      times,\n      ease\n    });\n    // Override the browser calculated startTime with one synchronised to other JS\n    // and WAAPI animations starting this event loop.\n    animation.startTime = startTime !== null && startTime !== void 0 ? startTime : this.calcStartTime();\n    if (this.pendingTimeline) {\n      attachTimeline(animation, this.pendingTimeline);\n      this.pendingTimeline = undefined;\n    } else {\n      /**\n       * Prefer the `onfinish` prop as it's more widely supported than\n       * the `finished` promise.\n       *\n       * Here, we synchronously set the provided MotionValue to the end\n       * keyframe. If we didn't, when the WAAPI animation is finished it would\n       * be removed from the element which would then revert to its old styles.\n       */\n      animation.onfinish = () => {\n        const {\n          onComplete\n        } = this.options;\n        motionValue.set(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n        onComplete && onComplete();\n        this.cancel();\n        this.resolveFinishedPromise();\n      };\n    }\n    return {\n      animation,\n      duration,\n      times,\n      type,\n      ease,\n      keyframes: keyframes\n    };\n  }\n  get duration() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return 0;\n    const {\n      duration\n    } = resolved;\n    return millisecondsToSeconds(duration);\n  }\n  get time() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return 0;\n    const {\n      animation\n    } = resolved;\n    return millisecondsToSeconds(animation.currentTime || 0);\n  }\n  set time(newTime) {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    const {\n      animation\n    } = resolved;\n    animation.currentTime = secondsToMilliseconds(newTime);\n  }\n  get speed() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return 1;\n    const {\n      animation\n    } = resolved;\n    return animation.playbackRate;\n  }\n  set speed(newSpeed) {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    const {\n      animation\n    } = resolved;\n    animation.playbackRate = newSpeed;\n  }\n  get state() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return \"idle\";\n    const {\n      animation\n    } = resolved;\n    return animation.playState;\n  }\n  get startTime() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return null;\n    const {\n      animation\n    } = resolved;\n    // Coerce to number as TypeScript incorrectly types this\n    // as CSSNumberish\n    return animation.startTime;\n  }\n  /**\n   * Replace the default DocumentTimeline with another AnimationTimeline.\n   * Currently used for scroll animations.\n   */\n  attachTimeline(timeline) {\n    if (!this._resolved) {\n      this.pendingTimeline = timeline;\n    } else {\n      const {\n        resolved\n      } = this;\n      if (!resolved) return noop;\n      const {\n        animation\n      } = resolved;\n      attachTimeline(animation, timeline);\n    }\n    return noop;\n  }\n  play() {\n    if (this.isStopped) return;\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    const {\n      animation\n    } = resolved;\n    if (animation.playState === \"finished\") {\n      this.updateFinishedPromise();\n    }\n    animation.play();\n  }\n  pause() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    const {\n      animation\n    } = resolved;\n    animation.pause();\n  }\n  stop() {\n    this.resolver.cancel();\n    this.isStopped = true;\n    if (this.state === \"idle\") return;\n    this.resolveFinishedPromise();\n    this.updateFinishedPromise();\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    const {\n      animation,\n      keyframes,\n      duration,\n      type,\n      ease,\n      times\n    } = resolved;\n    if (animation.playState === \"idle\" || animation.playState === \"finished\") {\n      return;\n    }\n    /**\n     * WAAPI doesn't natively have any interruption capabilities.\n     *\n     * Rather than read commited styles back out of the DOM, we can\n     * create a renderless JS animation and sample it twice to calculate\n     * its current value, \"previous\" value, and therefore allow\n     * Motion to calculate velocity for any subsequent animation.\n     */\n    if (this.time) {\n      const {\n        motionValue,\n        onUpdate,\n        onComplete,\n        element,\n        ...options\n      } = this.options;\n      const sampleAnimation = new MainThreadAnimation({\n        ...options,\n        keyframes,\n        duration,\n        type,\n        ease,\n        times,\n        isGenerator: true\n      });\n      const sampleTime = secondsToMilliseconds(this.time);\n      motionValue.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);\n    }\n    const {\n      onStop\n    } = this.options;\n    onStop && onStop();\n    this.cancel();\n  }\n  complete() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    resolved.animation.finish();\n  }\n  cancel() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    resolved.animation.cancel();\n  }\n  static supports(options) {\n    const {\n      motionValue,\n      name,\n      repeatDelay,\n      repeatType,\n      damping,\n      type\n    } = options;\n    if (!motionValue || !motionValue.owner || !(motionValue.owner.current instanceof HTMLElement)) {\n      return false;\n    }\n    const {\n      onUpdate,\n      transformTemplate\n    } = motionValue.owner.getProps();\n    return supportsWaapi() && name && acceleratedValues.has(name) &&\n    /**\n     * If we're outputting values to onUpdate then we can't use WAAPI as there's\n     * no way to read the value from WAAPI every frame.\n     */\n    !onUpdate && !transformTemplate && !repeatDelay && repeatType !== \"mirror\" && damping !== 0 && type !== \"inertia\";\n  }\n}\nexport { AcceleratedAnimation };","map":{"version":3,"names":["supportsLinearEasing","attachTimeline","isGenerator","isWaapiSupportedEasing","millisecondsToSeconds","secondsToMilliseconds","noop","anticipate","backInOut","circInOut","DOMKeyframesResolver","BaseAnimation","MainThreadAnimation","acceleratedValues","startWaapiAnimation","getFinalKeyframe","supportsWaapi","sampleDelta","maxDuration","requiresPregeneratedKeyframes","options","type","ease","pregenerateKeyframes","keyframes","sampleAnimation","repeat","delay","state","done","value","pregeneratedKeyframes","t","sample","push","times","undefined","duration","unsupportedEasingFunctions","isUnsupportedEase","key","AcceleratedAnimation","constructor","name","motionValue","element","resolver","resolvedKeyframes","finalKeyframe","onKeyframesResolved","scheduleResolve","initPlayback","startTime","owner","current","onComplete","onUpdate","pregeneratedAnimation","length","animation","calcStartTime","pendingTimeline","onfinish","set","cancel","resolveFinishedPromise","resolved","time","currentTime","newTime","speed","playbackRate","newSpeed","playState","timeline","_resolved","play","isStopped","updateFinishedPromise","pause","stop","sampleTime","setWithVelocity","onStop","complete","finish","supports","repeatDelay","repeatType","damping","HTMLElement","transformTemplate","getProps","has"],"sources":["D:/portfolio-master/node_modules/framer-motion/dist/es/animation/animators/AcceleratedAnimation.mjs"],"sourcesContent":["import { supportsLinearEasing, attachTimeline, isGenerator, isWaapiSupportedEasing } from 'motion-dom';\nimport { millisecondsToSeconds, secondsToMilliseconds, noop } from 'motion-utils';\nimport { anticipate } from '../../easing/anticipate.mjs';\nimport { backInOut } from '../../easing/back.mjs';\nimport { circInOut } from '../../easing/circ.mjs';\nimport { DOMKeyframesResolver } from '../../render/dom/DOMKeyframesResolver.mjs';\nimport { BaseAnimation } from './BaseAnimation.mjs';\nimport { MainThreadAnimation } from './MainThreadAnimation.mjs';\nimport { acceleratedValues } from './utils/accelerated-values.mjs';\nimport { startWaapiAnimation } from './waapi/index.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\nimport { supportsWaapi } from './waapi/utils/supports-waapi.mjs';\n\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\n/**\n * Check if an animation can run natively via WAAPI or requires pregenerated keyframes.\n * WAAPI doesn't support spring or function easings so we run these as JS animation before\n * handing off.\n */\nfunction requiresPregeneratedKeyframes(options) {\n    return (isGenerator(options.type) ||\n        options.type === \"spring\" ||\n        !isWaapiSupportedEasing(options.ease));\n}\nfunction pregenerateKeyframes(keyframes, options) {\n    /**\n     * Create a main-thread animation to pregenerate keyframes.\n     * We sample this at regular intervals to generate keyframes that we then\n     * linearly interpolate between.\n     */\n    const sampleAnimation = new MainThreadAnimation({\n        ...options,\n        keyframes,\n        repeat: 0,\n        delay: 0,\n        isGenerator: true,\n    });\n    let state = { done: false, value: keyframes[0] };\n    const pregeneratedKeyframes = [];\n    /**\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\n     * we're heading for an infinite loop.\n     */\n    let t = 0;\n    while (!state.done && t < maxDuration) {\n        state = sampleAnimation.sample(t);\n        pregeneratedKeyframes.push(state.value);\n        t += sampleDelta;\n    }\n    return {\n        times: undefined,\n        keyframes: pregeneratedKeyframes,\n        duration: t - sampleDelta,\n        ease: \"linear\",\n    };\n}\nconst unsupportedEasingFunctions = {\n    anticipate,\n    backInOut,\n    circInOut,\n};\nfunction isUnsupportedEase(key) {\n    return key in unsupportedEasingFunctions;\n}\nclass AcceleratedAnimation extends BaseAnimation {\n    constructor(options) {\n        super(options);\n        const { name, motionValue, element, keyframes } = this.options;\n        this.resolver = new DOMKeyframesResolver(keyframes, (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe), name, motionValue, element);\n        this.resolver.scheduleResolve();\n    }\n    initPlayback(keyframes, finalKeyframe) {\n        let { duration = 300, times, ease, type, motionValue, name, startTime, } = this.options;\n        /**\n         * If element has since been unmounted, return false to indicate\n         * the animation failed to initialised.\n         */\n        if (!motionValue.owner || !motionValue.owner.current) {\n            return false;\n        }\n        /**\n         * If the user has provided an easing function name that isn't supported\n         * by WAAPI (like \"anticipate\"), we need to provide the corressponding\n         * function. This will later get converted to a linear() easing function.\n         */\n        if (typeof ease === \"string\" &&\n            supportsLinearEasing() &&\n            isUnsupportedEase(ease)) {\n            ease = unsupportedEasingFunctions[ease];\n        }\n        /**\n         * If this animation needs pre-generated keyframes then generate.\n         */\n        if (requiresPregeneratedKeyframes(this.options)) {\n            const { onComplete, onUpdate, motionValue, element, ...options } = this.options;\n            const pregeneratedAnimation = pregenerateKeyframes(keyframes, options);\n            keyframes = pregeneratedAnimation.keyframes;\n            // If this is a very short animation, ensure we have\n            // at least two keyframes to animate between as older browsers\n            // can't animate between a single keyframe.\n            if (keyframes.length === 1) {\n                keyframes[1] = keyframes[0];\n            }\n            duration = pregeneratedAnimation.duration;\n            times = pregeneratedAnimation.times;\n            ease = pregeneratedAnimation.ease;\n            type = \"keyframes\";\n        }\n        const animation = startWaapiAnimation(motionValue.owner.current, name, keyframes, { ...this.options, duration, times, ease });\n        // Override the browser calculated startTime with one synchronised to other JS\n        // and WAAPI animations starting this event loop.\n        animation.startTime = startTime !== null && startTime !== void 0 ? startTime : this.calcStartTime();\n        if (this.pendingTimeline) {\n            attachTimeline(animation, this.pendingTimeline);\n            this.pendingTimeline = undefined;\n        }\n        else {\n            /**\n             * Prefer the `onfinish` prop as it's more widely supported than\n             * the `finished` promise.\n             *\n             * Here, we synchronously set the provided MotionValue to the end\n             * keyframe. If we didn't, when the WAAPI animation is finished it would\n             * be removed from the element which would then revert to its old styles.\n             */\n            animation.onfinish = () => {\n                const { onComplete } = this.options;\n                motionValue.set(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n                onComplete && onComplete();\n                this.cancel();\n                this.resolveFinishedPromise();\n            };\n        }\n        return {\n            animation,\n            duration,\n            times,\n            type,\n            ease,\n            keyframes: keyframes,\n        };\n    }\n    get duration() {\n        const { resolved } = this;\n        if (!resolved)\n            return 0;\n        const { duration } = resolved;\n        return millisecondsToSeconds(duration);\n    }\n    get time() {\n        const { resolved } = this;\n        if (!resolved)\n            return 0;\n        const { animation } = resolved;\n        return millisecondsToSeconds(animation.currentTime || 0);\n    }\n    set time(newTime) {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.currentTime = secondsToMilliseconds(newTime);\n    }\n    get speed() {\n        const { resolved } = this;\n        if (!resolved)\n            return 1;\n        const { animation } = resolved;\n        return animation.playbackRate;\n    }\n    set speed(newSpeed) {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.playbackRate = newSpeed;\n    }\n    get state() {\n        const { resolved } = this;\n        if (!resolved)\n            return \"idle\";\n        const { animation } = resolved;\n        return animation.playState;\n    }\n    get startTime() {\n        const { resolved } = this;\n        if (!resolved)\n            return null;\n        const { animation } = resolved;\n        // Coerce to number as TypeScript incorrectly types this\n        // as CSSNumberish\n        return animation.startTime;\n    }\n    /**\n     * Replace the default DocumentTimeline with another AnimationTimeline.\n     * Currently used for scroll animations.\n     */\n    attachTimeline(timeline) {\n        if (!this._resolved) {\n            this.pendingTimeline = timeline;\n        }\n        else {\n            const { resolved } = this;\n            if (!resolved)\n                return noop;\n            const { animation } = resolved;\n            attachTimeline(animation, timeline);\n        }\n        return noop;\n    }\n    play() {\n        if (this.isStopped)\n            return;\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        if (animation.playState === \"finished\") {\n            this.updateFinishedPromise();\n        }\n        animation.play();\n    }\n    pause() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.pause();\n    }\n    stop() {\n        this.resolver.cancel();\n        this.isStopped = true;\n        if (this.state === \"idle\")\n            return;\n        this.resolveFinishedPromise();\n        this.updateFinishedPromise();\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation, keyframes, duration, type, ease, times } = resolved;\n        if (animation.playState === \"idle\" ||\n            animation.playState === \"finished\") {\n            return;\n        }\n        /**\n         * WAAPI doesn't natively have any interruption capabilities.\n         *\n         * Rather than read commited styles back out of the DOM, we can\n         * create a renderless JS animation and sample it twice to calculate\n         * its current value, \"previous\" value, and therefore allow\n         * Motion to calculate velocity for any subsequent animation.\n         */\n        if (this.time) {\n            const { motionValue, onUpdate, onComplete, element, ...options } = this.options;\n            const sampleAnimation = new MainThreadAnimation({\n                ...options,\n                keyframes,\n                duration,\n                type,\n                ease,\n                times,\n                isGenerator: true,\n            });\n            const sampleTime = secondsToMilliseconds(this.time);\n            motionValue.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);\n        }\n        const { onStop } = this.options;\n        onStop && onStop();\n        this.cancel();\n    }\n    complete() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        resolved.animation.finish();\n    }\n    cancel() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        resolved.animation.cancel();\n    }\n    static supports(options) {\n        const { motionValue, name, repeatDelay, repeatType, damping, type } = options;\n        if (!motionValue ||\n            !motionValue.owner ||\n            !(motionValue.owner.current instanceof HTMLElement)) {\n            return false;\n        }\n        const { onUpdate, transformTemplate } = motionValue.owner.getProps();\n        return (supportsWaapi() &&\n            name &&\n            acceleratedValues.has(name) &&\n            /**\n             * If we're outputting values to onUpdate then we can't use WAAPI as there's\n             * no way to read the value from WAAPI every frame.\n             */\n            !onUpdate &&\n            !transformTemplate &&\n            !repeatDelay &&\n            repeatType !== \"mirror\" &&\n            damping !== 0 &&\n            type !== \"inertia\");\n    }\n}\n\nexport { AcceleratedAnimation };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}