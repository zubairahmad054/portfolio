{"ast":null,"code":"import { isDragActive } from '../drag/state/is-active.mjs';\nimport { capturePointer } from '../utils/capture-pointer.mjs';\nimport { isNodeOrChild } from '../utils/is-node-or-child.mjs';\nimport { isPrimaryPointer } from '../utils/is-primary-pointer.mjs';\nimport { setupGesture } from '../utils/setup.mjs';\nimport { isElementKeyboardAccessible } from './utils/is-keyboard-accessible.mjs';\nimport { enableKeyboardPress } from './utils/keyboard.mjs';\nimport { isPressing } from './utils/state.mjs';\n\n/**\r\n * Filter out events that are not primary pointer events, or are triggering\r\n * while a Motion gesture is active.\r\n */\nfunction isValidPressEvent(event) {\n  return isPrimaryPointer(event) && !isDragActive();\n}\n/**\r\n * Create a press gesture.\r\n *\r\n * Press is different to `\"pointerdown\"`, `\"pointerup\"` in that it\r\n * automatically filters out secondary pointer events like right\r\n * click and multitouch.\r\n *\r\n * It also adds accessibility support for keyboards, where\r\n * an element with a press gesture will receive focus and\r\n *  trigger on Enter `\"keydown\"` and `\"keyup\"` events.\r\n *\r\n * This is different to a browser's `\"click\"` event, which does\r\n * respond to keyboards but only for the `\"click\"` itself, rather\r\n * than the press start and end/cancel. The element also needs\r\n * to be focusable for this to work, whereas a press gesture will\r\n * make an element focusable by default.\r\n *\r\n * @public\r\n */\nfunction press(targetOrSelector, onPressStart, options = {}) {\n  const [targets, eventOptions, cancelEvents] = setupGesture(targetOrSelector, options);\n  const startPress = startEvent => {\n    const target = startEvent.currentTarget;\n    if (!target || !isValidPressEvent(startEvent) || isPressing.has(target)) return;\n    isPressing.add(target);\n    capturePointer(startEvent, \"set\");\n    const onPressEnd = onPressStart(target, startEvent);\n    const onPointerEnd = (endEvent, success) => {\n      target.removeEventListener(\"pointerup\", onPointerUp);\n      target.removeEventListener(\"pointercancel\", onPointerCancel);\n      capturePointer(endEvent, \"release\");\n      if (!isValidPressEvent(endEvent) || !isPressing.has(target)) {\n        return;\n      }\n      isPressing.delete(target);\n      if (typeof onPressEnd === \"function\") {\n        onPressEnd(endEvent, {\n          success\n        });\n      }\n    };\n    const onPointerUp = upEvent => {\n      const isOutside = !upEvent.isTrusted ? false : checkOutside(upEvent, target instanceof Element ? target.getBoundingClientRect() : {\n        left: 0,\n        top: 0,\n        right: window.innerWidth,\n        bottom: window.innerHeight\n      });\n      if (isOutside) {\n        onPointerEnd(upEvent, false);\n      } else {\n        onPointerEnd(upEvent, !(target instanceof Element) || isNodeOrChild(target, upEvent.target));\n      }\n    };\n    const onPointerCancel = cancelEvent => {\n      onPointerEnd(cancelEvent, false);\n    };\n    target.addEventListener(\"pointerup\", onPointerUp, eventOptions);\n    target.addEventListener(\"pointercancel\", onPointerCancel, eventOptions);\n    target.addEventListener(\"lostpointercapture\", onPointerCancel, eventOptions);\n  };\n  targets.forEach(target => {\n    target = options.useGlobalTarget ? window : target;\n    let canAddKeyboardAccessibility = false;\n    if (target instanceof HTMLElement) {\n      canAddKeyboardAccessibility = true;\n      if (!isElementKeyboardAccessible(target) && target.getAttribute(\"tabindex\") === null) {\n        target.tabIndex = 0;\n      }\n    }\n    target.addEventListener(\"pointerdown\", startPress, eventOptions);\n    if (canAddKeyboardAccessibility) {\n      target.addEventListener(\"focus\", event => enableKeyboardPress(event, eventOptions), eventOptions);\n    }\n  });\n  return cancelEvents;\n}\nfunction checkOutside(event, rect) {\n  return event.clientX < rect.left || event.clientX > rect.right || event.clientY < rect.top || event.clientY > rect.bottom;\n}\nexport { press };","map":{"version":3,"names":["isDragActive","capturePointer","isNodeOrChild","isPrimaryPointer","setupGesture","isElementKeyboardAccessible","enableKeyboardPress","isPressing","isValidPressEvent","event","press","targetOrSelector","onPressStart","options","targets","eventOptions","cancelEvents","startPress","startEvent","target","currentTarget","has","add","onPressEnd","onPointerEnd","endEvent","success","removeEventListener","onPointerUp","onPointerCancel","delete","upEvent","isOutside","isTrusted","checkOutside","Element","getBoundingClientRect","left","top","right","window","innerWidth","bottom","innerHeight","cancelEvent","addEventListener","forEach","useGlobalTarget","canAddKeyboardAccessibility","HTMLElement","getAttribute","tabIndex","rect","clientX","clientY"],"sources":["D:/portfolio-master/node_modules/motion-dom/dist/es/gestures/press/index.mjs"],"sourcesContent":["import { isDragActive } from '../drag/state/is-active.mjs';\r\nimport { capturePointer } from '../utils/capture-pointer.mjs';\r\nimport { isNodeOrChild } from '../utils/is-node-or-child.mjs';\r\nimport { isPrimaryPointer } from '../utils/is-primary-pointer.mjs';\r\nimport { setupGesture } from '../utils/setup.mjs';\r\nimport { isElementKeyboardAccessible } from './utils/is-keyboard-accessible.mjs';\r\nimport { enableKeyboardPress } from './utils/keyboard.mjs';\r\nimport { isPressing } from './utils/state.mjs';\r\n\r\n/**\r\n * Filter out events that are not primary pointer events, or are triggering\r\n * while a Motion gesture is active.\r\n */\r\nfunction isValidPressEvent(event) {\r\n    return isPrimaryPointer(event) && !isDragActive();\r\n}\r\n/**\r\n * Create a press gesture.\r\n *\r\n * Press is different to `\"pointerdown\"`, `\"pointerup\"` in that it\r\n * automatically filters out secondary pointer events like right\r\n * click and multitouch.\r\n *\r\n * It also adds accessibility support for keyboards, where\r\n * an element with a press gesture will receive focus and\r\n *  trigger on Enter `\"keydown\"` and `\"keyup\"` events.\r\n *\r\n * This is different to a browser's `\"click\"` event, which does\r\n * respond to keyboards but only for the `\"click\"` itself, rather\r\n * than the press start and end/cancel. The element also needs\r\n * to be focusable for this to work, whereas a press gesture will\r\n * make an element focusable by default.\r\n *\r\n * @public\r\n */\r\nfunction press(targetOrSelector, onPressStart, options = {}) {\r\n    const [targets, eventOptions, cancelEvents] = setupGesture(targetOrSelector, options);\r\n    const startPress = (startEvent) => {\r\n        const target = startEvent.currentTarget;\r\n        if (!target || !isValidPressEvent(startEvent) || isPressing.has(target))\r\n            return;\r\n        isPressing.add(target);\r\n        capturePointer(startEvent, \"set\");\r\n        const onPressEnd = onPressStart(target, startEvent);\r\n        const onPointerEnd = (endEvent, success) => {\r\n            target.removeEventListener(\"pointerup\", onPointerUp);\r\n            target.removeEventListener(\"pointercancel\", onPointerCancel);\r\n            capturePointer(endEvent, \"release\");\r\n            if (!isValidPressEvent(endEvent) || !isPressing.has(target)) {\r\n                return;\r\n            }\r\n            isPressing.delete(target);\r\n            if (typeof onPressEnd === \"function\") {\r\n                onPressEnd(endEvent, { success });\r\n            }\r\n        };\r\n        const onPointerUp = (upEvent) => {\r\n            const isOutside = !upEvent.isTrusted\r\n                ? false\r\n                : checkOutside(upEvent, target instanceof Element\r\n                    ? target.getBoundingClientRect()\r\n                    : {\r\n                        left: 0,\r\n                        top: 0,\r\n                        right: window.innerWidth,\r\n                        bottom: window.innerHeight,\r\n                    });\r\n            if (isOutside) {\r\n                onPointerEnd(upEvent, false);\r\n            }\r\n            else {\r\n                onPointerEnd(upEvent, !(target instanceof Element) ||\r\n                    isNodeOrChild(target, upEvent.target));\r\n            }\r\n        };\r\n        const onPointerCancel = (cancelEvent) => {\r\n            onPointerEnd(cancelEvent, false);\r\n        };\r\n        target.addEventListener(\"pointerup\", onPointerUp, eventOptions);\r\n        target.addEventListener(\"pointercancel\", onPointerCancel, eventOptions);\r\n        target.addEventListener(\"lostpointercapture\", onPointerCancel, eventOptions);\r\n    };\r\n    targets.forEach((target) => {\r\n        target = options.useGlobalTarget ? window : target;\r\n        let canAddKeyboardAccessibility = false;\r\n        if (target instanceof HTMLElement) {\r\n            canAddKeyboardAccessibility = true;\r\n            if (!isElementKeyboardAccessible(target) &&\r\n                target.getAttribute(\"tabindex\") === null) {\r\n                target.tabIndex = 0;\r\n            }\r\n        }\r\n        target.addEventListener(\"pointerdown\", startPress, eventOptions);\r\n        if (canAddKeyboardAccessibility) {\r\n            target.addEventListener(\"focus\", (event) => enableKeyboardPress(event, eventOptions), eventOptions);\r\n        }\r\n    });\r\n    return cancelEvents;\r\n}\r\nfunction checkOutside(event, rect) {\r\n    return (event.clientX < rect.left ||\r\n        event.clientX > rect.right ||\r\n        event.clientY < rect.top ||\r\n        event.clientY > rect.bottom);\r\n}\r\n\r\nexport { press };\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,6BAA6B;AAC1D,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,SAASC,aAAa,QAAQ,+BAA+B;AAC7D,SAASC,gBAAgB,QAAQ,iCAAiC;AAClE,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,2BAA2B,QAAQ,oCAAoC;AAChF,SAASC,mBAAmB,QAAQ,sBAAsB;AAC1D,SAASC,UAAU,QAAQ,mBAAmB;;AAE9C;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAACC,KAAK,EAAE;EAC9B,OAAON,gBAAgB,CAACM,KAAK,CAAC,IAAI,CAACT,YAAY,CAAC,CAAC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASU,KAAKA,CAACC,gBAAgB,EAAEC,YAAY,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACzD,MAAM,CAACC,OAAO,EAAEC,YAAY,EAAEC,YAAY,CAAC,GAAGZ,YAAY,CAACO,gBAAgB,EAAEE,OAAO,CAAC;EACrF,MAAMI,UAAU,GAAIC,UAAU,IAAK;IAC/B,MAAMC,MAAM,GAAGD,UAAU,CAACE,aAAa;IACvC,IAAI,CAACD,MAAM,IAAI,CAACX,iBAAiB,CAACU,UAAU,CAAC,IAAIX,UAAU,CAACc,GAAG,CAACF,MAAM,CAAC,EACnE;IACJZ,UAAU,CAACe,GAAG,CAACH,MAAM,CAAC;IACtBlB,cAAc,CAACiB,UAAU,EAAE,KAAK,CAAC;IACjC,MAAMK,UAAU,GAAGX,YAAY,CAACO,MAAM,EAAED,UAAU,CAAC;IACnD,MAAMM,YAAY,GAAGA,CAACC,QAAQ,EAAEC,OAAO,KAAK;MACxCP,MAAM,CAACQ,mBAAmB,CAAC,WAAW,EAAEC,WAAW,CAAC;MACpDT,MAAM,CAACQ,mBAAmB,CAAC,eAAe,EAAEE,eAAe,CAAC;MAC5D5B,cAAc,CAACwB,QAAQ,EAAE,SAAS,CAAC;MACnC,IAAI,CAACjB,iBAAiB,CAACiB,QAAQ,CAAC,IAAI,CAAClB,UAAU,CAACc,GAAG,CAACF,MAAM,CAAC,EAAE;QACzD;MACJ;MACAZ,UAAU,CAACuB,MAAM,CAACX,MAAM,CAAC;MACzB,IAAI,OAAOI,UAAU,KAAK,UAAU,EAAE;QAClCA,UAAU,CAACE,QAAQ,EAAE;UAAEC;QAAQ,CAAC,CAAC;MACrC;IACJ,CAAC;IACD,MAAME,WAAW,GAAIG,OAAO,IAAK;MAC7B,MAAMC,SAAS,GAAG,CAACD,OAAO,CAACE,SAAS,GAC9B,KAAK,GACLC,YAAY,CAACH,OAAO,EAAEZ,MAAM,YAAYgB,OAAO,GAC3ChB,MAAM,CAACiB,qBAAqB,CAAC,CAAC,GAC9B;QACEC,IAAI,EAAE,CAAC;QACPC,GAAG,EAAE,CAAC;QACNC,KAAK,EAAEC,MAAM,CAACC,UAAU;QACxBC,MAAM,EAAEF,MAAM,CAACG;MACnB,CAAC,CAAC;MACV,IAAIX,SAAS,EAAE;QACXR,YAAY,CAACO,OAAO,EAAE,KAAK,CAAC;MAChC,CAAC,MACI;QACDP,YAAY,CAACO,OAAO,EAAE,EAAEZ,MAAM,YAAYgB,OAAO,CAAC,IAC9CjC,aAAa,CAACiB,MAAM,EAAEY,OAAO,CAACZ,MAAM,CAAC,CAAC;MAC9C;IACJ,CAAC;IACD,MAAMU,eAAe,GAAIe,WAAW,IAAK;MACrCpB,YAAY,CAACoB,WAAW,EAAE,KAAK,CAAC;IACpC,CAAC;IACDzB,MAAM,CAAC0B,gBAAgB,CAAC,WAAW,EAAEjB,WAAW,EAAEb,YAAY,CAAC;IAC/DI,MAAM,CAAC0B,gBAAgB,CAAC,eAAe,EAAEhB,eAAe,EAAEd,YAAY,CAAC;IACvEI,MAAM,CAAC0B,gBAAgB,CAAC,oBAAoB,EAAEhB,eAAe,EAAEd,YAAY,CAAC;EAChF,CAAC;EACDD,OAAO,CAACgC,OAAO,CAAE3B,MAAM,IAAK;IACxBA,MAAM,GAAGN,OAAO,CAACkC,eAAe,GAAGP,MAAM,GAAGrB,MAAM;IAClD,IAAI6B,2BAA2B,GAAG,KAAK;IACvC,IAAI7B,MAAM,YAAY8B,WAAW,EAAE;MAC/BD,2BAA2B,GAAG,IAAI;MAClC,IAAI,CAAC3C,2BAA2B,CAACc,MAAM,CAAC,IACpCA,MAAM,CAAC+B,YAAY,CAAC,UAAU,CAAC,KAAK,IAAI,EAAE;QAC1C/B,MAAM,CAACgC,QAAQ,GAAG,CAAC;MACvB;IACJ;IACAhC,MAAM,CAAC0B,gBAAgB,CAAC,aAAa,EAAE5B,UAAU,EAAEF,YAAY,CAAC;IAChE,IAAIiC,2BAA2B,EAAE;MAC7B7B,MAAM,CAAC0B,gBAAgB,CAAC,OAAO,EAAGpC,KAAK,IAAKH,mBAAmB,CAACG,KAAK,EAAEM,YAAY,CAAC,EAAEA,YAAY,CAAC;IACvG;EACJ,CAAC,CAAC;EACF,OAAOC,YAAY;AACvB;AACA,SAASkB,YAAYA,CAACzB,KAAK,EAAE2C,IAAI,EAAE;EAC/B,OAAQ3C,KAAK,CAAC4C,OAAO,GAAGD,IAAI,CAACf,IAAI,IAC7B5B,KAAK,CAAC4C,OAAO,GAAGD,IAAI,CAACb,KAAK,IAC1B9B,KAAK,CAAC6C,OAAO,GAAGF,IAAI,CAACd,GAAG,IACxB7B,KAAK,CAAC6C,OAAO,GAAGF,IAAI,CAACV,MAAM;AACnC;AAEA,SAAShC,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}