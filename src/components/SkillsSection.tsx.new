import React, { useState, useMemo } from 'react';
import { motion } from 'framer-motion';

// Define skill category type
interface SkillCategory {
  name: string;
  icon: JSX.Element;
  skills: string[];
}

// Define the skill categories and their respective skills
const skillCategoriesData: SkillCategory[] = [
  {
    name: "Programming Languages",
    icon: (
      <svg xmlns="http://www.w3.org/2000/svg" className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
      </svg>
    ),
    skills: ["Python", "SQL", "PySpark", "Spark SQL", "DAX"]
  },
  {
    name: "Libraries/Frameworks",
    icon: (
      <svg xmlns="http://www.w3.org/2000/svg" className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
      </svg>
    ),
    skills: ["Pandas", "Seaborn", "Matplotlib", "Sklearn", "Plotly", "Linear Regression", "Gradient Boosting"]
  },
  {
    name: "Platforms/Tools",
    icon: (
      <svg xmlns="http://www.w3.org/2000/svg" className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z" />
      </svg>
    ),
    skills: ["Azure Data Lakes", "Azure Synapse Analytics", "Oracle", "SSMS", "Power BI", "Tableau", "Notebooks (Jupyter, Google Colab)", "Linux", "Git"]
  }
];

const SkillsSection: React.FC = () => {
  // Create a new array with the "All Skills" category at the beginning
  const skillCategories = useMemo(() => {
    // Create an "All Skills" category with all skills combined
    const allSkills = skillCategoriesData.flatMap(category => category.skills);
    
    const allSkillsCategory: SkillCategory = {
      name: "All Skills",
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
        </svg>
      ),
      skills: allSkills
    };
    
    // Add the "All Skills" category at the beginning, then include the original categories
    return [allSkillsCategory, ...skillCategoriesData];
  }, []);
  
  const [activeCategory, setActiveCategory] = useState<string>(skillCategories[0].name);

  const fadeInUpVariants = {
    initial: { opacity: 0, y: 20 },
    animate: (i: number) => ({
      opacity: 1,
      y: 0,
      transition: {
        delay: 0.1 * i,
        duration: 0.5,
        ease: "easeOut"
      }
    })
  };

  const skillVariants = {
    initial: { scale: 0.8, opacity: 0 },
    animate: (i: number) => ({
      scale: 1,
      opacity: 1,
      transition: {
        delay: i * 0.05,
        duration: 0.3,
        type: "spring",
        stiffness: 100
      }
    }),
    hover: {
      scale: 1.05,
      backgroundColor: "rgba(100, 255, 218, 0.1)",
      borderColor: "rgba(100, 255, 218, 0.5)",
      transition: {
        duration: 0.2
      }
    }
  };

  return (
    <section id="skills" className="py-20 relative">
      <div className="container mx-auto px-4">
        <motion.h2
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          viewport={{ once: true }}
          className="text-4xl font-heading font-bold text-secondary mb-8"
        >
          My Technical Skills
        </motion.h2>

        <motion.p
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
          viewport={{ once: true }}
          className="text-lg text-neutral mb-12 max-w-3xl"
        >
          Over the years, I've developed expertise across various data technologies and tools,
          enabling me to deliver end-to-end analytical solutions from data extraction to visualization.
        </motion.p>

        {/* Category Tabs */}
        <div className="mb-12">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.3 }}
            viewport={{ once: true }}
            className="flex flex-wrap gap-4"
          >
            {skillCategories.map((category, index) => (
              <motion.button
                key={category.name}
                custom={index}
                variants={fadeInUpVariants}
                initial="initial"
                whileInView="animate"
                viewport={{ once: true }}
                onClick={() => setActiveCategory(category.name)}
                className={`flex items-center gap-2 px-6 py-3 rounded-full transition-all duration-300 ${
                  activeCategory === category.name
                    ? "bg-secondary text-primary shadow-lg shadow-secondary/20"
                    : "bg-neutral/10 text-neutral-light hover:bg-neutral/20"
                }`}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <span className="text-current">{category.icon}</span>
                <span>{category.name}</span>
              </motion.button>
            ))}
          </motion.div>
        </div>

        {/* Skills Grid */}
        <div className="relative overflow-hidden">
          {skillCategories.map((category) => (
            <motion.div
              key={category.name}
              initial={{ opacity: 0, x: 20 }}
              animate={{ 
                opacity: activeCategory === category.name ? 1 : 0,
                x: activeCategory === category.name ? 0 : 20,
                position: activeCategory === category.name ? "relative" : "absolute"
              }}
              transition={{ duration: 0.5 }}
              className={`grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4 ${
                activeCategory === category.name ? "block" : "hidden"
              }`}
            >
              {category.skills.map((skill, index) => (
                <motion.div
                  key={`${category.name}-${skill}`}
                  custom={index}
                  variants={skillVariants}
                  initial="initial"
                  animate="animate"
                  whileHover="hover"
                  className="bg-neutral/5 backdrop-blur-sm border border-neutral/10 rounded-lg p-4 flex items-center justify-center min-h-[100px]"
                >
                  <motion.span 
                    className="text-center text-neutral-light font-medium"
                    whileHover={{ color: "rgba(100, 255, 218, 1)" }}
                  >
                    {skill}
                  </motion.span>
                </motion.div>
              ))}
            </motion.div>
          ))}
        </div>

        {/* Animated Background Element */}
        <div className="absolute -bottom-10 -right-10 w-64 h-64 bg-secondary/5 rounded-full blur-3xl opacity-30 z-0"></div>
        <div className="absolute -top-10 -left-10 w-64 h-64 bg-secondary/5 rounded-full blur-3xl opacity-30 z-0"></div>
      </div>
    </section>
  );
};

export default SkillsSection;
